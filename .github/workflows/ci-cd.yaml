name: CI/CD Pipeline for DevOps Task

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: devops_cicd_task_flask_app
      AWS_REGION: ap-south-1
      AWS_DEFAULT_REGION: ap-south-1

    permissions:
      id-token: write   # Required for OIDC
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install AWS CLI (latest version)
        run: |
          sudo apt update
          sudo apt install -y unzip curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::006478238453:role/oidc-githib-iam-role
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions-${{ github.run_id }}

      - name: Fetch DockerHub credentials from SSM
        run: |
          set -e
          echo "DOCKER_USERNAME=$(aws ssm get-parameter --name '/devops/dockerhub_username' --with-decryption --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=$(aws ssm get-parameter --name '/devops/dockerhub_password' --with-decryption --query 'Parameter.Value' --output text)" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Build Docker image
        run: docker build -t $DOCKER_USERNAME/$IMAGE_NAME:${{ github.sha }} .

      - name: Push Docker image
        run: docker push $DOCKER_USERNAME/$IMAGE_NAME:${{ github.sha }}

      - name: Install kubectl (stable version)
        run: |
          set -euo pipefail
          echo "ℹ️ Fetching latest stable kubectl version..."
          
          # Try multiple times to get version
          for i in {1..3}; do
            KUBECTL_VERSION=$(curl -sfL https://dl.k8s.io/release/stable.txt) && break
            sleep 5
            echo "⚠️ Attempt $i failed, retrying..."
          done
          
          if [ -z "$KUBECTL_VERSION" ]; then
            echo "❌ Failed to fetch kubectl version after 3 attempts"
            exit 1
          fi
          
          echo "✓ Downloading kubectl version: $KUBECTL_VERSION"
          curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl" --fail --retry 3
          
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client 

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name TaskInfra-Prod-EKS-Cluster

      - name: Verify EKS cluster access
        run: kubectl get nodes

      - name: Deploy to staging
        run: |
          kubectl apply -f k8s/staging/
          DEPLOYMENT_NAME=$(kubectl get deploy -n staging -o jsonpath='{.items[0].metadata.name}')
          kubectl rollout status deployment/$DEPLOYMENT_NAME -n staging --timeout=120s

      - name: Deploy to production
        if: github.ref == 'refs/heads/main'
        run: |
          kubectl apply -f k8s/production/
          DEPLOYMENT_NAME=$(kubectl get deploy -n production -o jsonpath='{.items[0].metadata.name}')
          kubectl rollout status deployment/$DEPLOYMENT_NAME -n production --timeout=120s

